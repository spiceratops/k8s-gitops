---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 72.5.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  maxHistory: 2
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
        hosts:
          - "${HOSTNAME_AM}"
        paths:
          - /
        tls:
          - hosts:
              - "${HOSTNAME_AM}"
      alertmanagerSpec:
        replicas: 3
        useExistingSecret: true
        configSecret: alertmanager-secret
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ${CLUSTER_STORAGE_BLOCK}
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      metricLabelsAllowlist:
        - "pods=[*]"
        - "deployments=[*]"
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels: ["node"]
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 192.168.1.201
        - 192.168.1.202
        - 192.168.1.203
    kubeEtcd:
      enabled: true
      endpoints: *cp
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    kubeProxy:
      enabled: false
      endpoints: *cp
    kubeScheduler:
      enabled: true
      endpoints: *cp
    prometheus:
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
        hosts:
          - "${HOSTNAME_PROM}"
        paths:
          - /
        tls:
          - hosts:
              - "${HOSTNAME_PROM}"
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 7d
        retentionSize: 25GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ${CLUSTER_STORAGE_BLOCK}
              resources:
                requests:
                  storage: 25Gi
        resources:
          requests:
            cpu: 100m
            memory: 1024M
          limits:
            memory: 6144M
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 25
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
