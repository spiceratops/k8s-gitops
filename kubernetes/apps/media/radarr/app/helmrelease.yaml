---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  driftDetection:
    mode: enabled

  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.4.0
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: radarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.22.0.9808@sha256:2bf6a9a5f30b28f09fa5601b23d095c64739ab0667753b95493a1bcdf194057d
            env:
              TZ: ${TIMEZONE}
              RADARR__AUTHENTICATION_METHOD: External
              RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              RADARR__INSTANCE_NAME: Radarr
              RADARR__PORT: &port 7878
              RADARR__LOG_LEVEL: info
              RADARR__THEME: dark
            envFrom:
              - secretRef:
                  name: radarr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            resources:
              requests:
                cpu: 10m
                memory: 256M
              limits:
                memory: 1024M
      radarr-concerts:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.4.0
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: radarr-concerts-secret
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.20.1.9773@sha256:8187c129a78fdfe15b1603db9175abd2be0e1ca2e99ea3733987c3ae941da165
            env:
              TZ: ${TIMEZONE}
              RADARR__AUTHENTICATION_METHOD: External
              RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              RADARR__INSTANCE_NAME: Radarr-Concerts
              RADARR__PORT: *port
              RADARR__LOG_LEVEL: info
              RADARR__THEME: dark
            envFrom:
              - secretRef:
                  name: radarr-concerts-secret
            probes:
              liveness: *probes
              readiness: *probes
              startup:
                enabled: false
            resources:
              requests:
                cpu: 10m
                memory: 256M
              limits:
                memory: 1024M
        pod:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values: ["sonarr"]
                  topologyKey: kubernetes.io/hostname
    service:
      movies:
        controller: radarr
        ports:
          http:
            port: *port
      concerts:
        controller: radarr-concerts
        ports:
          http:
            port: *port
    ingress:
      movies:
        enabled: true
        className: internal
        annotations:
          # nginx.ingress.kubernetes.io/auth-method: GET
          # nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local:9091/api/authz/auth-request
          # nginx.ingress.kubernetes.io/auth-signin: https://auth.${PRIVATE_DOMAIN}?rm=$request_method
          # nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          # nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: Movies Downloader
          gethomepage.dev/group: Downloaders
          gethomepage.dev/icon: radarr.png
          gethomepage.dev/name: Radarr
          gethomepage.dev/widget.type: radarr
          gethomepage.dev/widget.url: "http://radarr.media.svc.cluster.local:7878"
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_RADARR_TOKEN}}` }}"
        hosts:
          - host: "${HOSTNAME}"
            paths:
              - path: /
                service:
                  identifier: movies
                  port: http
        tls:
          - hosts:
              - "${HOSTNAME}"
      concerts:
        enabled: true
        className: internal
        annotations:
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local:9091/api/authz/auth-request
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${PRIVATE_DOMAIN}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: Concerts Downloader
          gethomepage.dev/group: Downloaders
          gethomepage.dev/icon: radarr.png
          gethomepage.dev/name: Radarr-Concerts
          gethomepage.dev/widget.type: radarr
          gethomepage.dev/widget.url: "http://radarr-concerts.media.svc.cluster.local:7878"
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_RADARR_TOKEN}}` }}"
        hosts:
          - host: "${HOSTNAME}"
            paths:
              - path: /
                service:
                  identifier: concerts
                  port: http
        tls:
          - hosts:
              - radarr-concerts.${PRIVATE_DOMAIN}
    persistence:
      config:
        enabled: true
        existingClaim: radarr
        advancedMounts:
          radarr:
            app:
              - path: /config
      config-concerts:
        enabled: true
        existingClaim: radarr-concerts
        advancedMounts:
          radarr-concerts:
            app:
              - path: /config
      media:
        existingClaim: nfs-media
        globalMounts:
          - path: /media
